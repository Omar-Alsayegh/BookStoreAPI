{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "NLog": {
    "throwConfigExceptions": true, // Keep true in development for immediate feedback on NLog config errors
    "targets": {
      "async": true,
      "file": {
        "type": "File",
        "name": "allfile",
        "fileName": "logs/nlog-all-${shortdate}.log",
        "layout": "${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=ToString}",
        "archiveFileName": "logs/archives/nlog-all-${shortdate}.{#}.log",
        "archiveEvery": "Day",
        "archiveNumbering": "Rolling",
        "maxArchiveFiles": 7,
        "concurrentWrites": true,
        "keepFileOpen": false
      },
      "errorfile": {
        "type": "File",
        "name": "errorfile",
        "fileName": "logs/nlog-error-${shortdate}.log",
        "layout": "${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=ToString}",
        "archiveFileName": "logs/archives/nlog-error-${shortdate}.{#}.log",
        "archiveEvery": "Day",
        "archiveNumbering": "Rolling",
        "maxArchiveFiles": 30,
        "concurrentWrites": true,
        "keepFileOpen": false
      },
      "console": {
        "type": "Console",
        "name": "console",
        "layout": "${longdate}|${uppercase:${level}}|${logger}|${message} ${exception:format=ToString}"
      }
    },
    "rules": [
      {
        "logger": "*",
        "minLevel": "Trace", // More verbose logging for development
        "writeTo": "console"
      },
      {
        "logger": "*",
        "minLevel": "Debug", // Detailed logs for development
        "writeTo": "allfile"
      },
      {
        "logger": "*",
        "minLevel": "Error",
        "writeTo": "errorfile"
      }
    ]
  },

  "SmtpSettings": {
    "Host": "smtp.gmail.com", // e.g., smtp.gmail.com, smtp-mail.outlook.com
    "Port": "587", // e.g., 587 for TLS/SSL, 465 for SSL
    "Username": "Omaralsayegh58@gmail.com", // Your email address
    "Password": "gqka dypj hivq qfkq", // Your email password or app-specific password
    "EnableSsl": "true", // Usually true
    "FromEmail": "Omaralsayegh58@gmail.com", // Sender email address
    "FromName": "BookStore API" // Sender display name
  },
  "PasswordResetSettings": {
    "CoolDownMinutes": 5 // User must wait 5 minutes between requests
  },
  "FileStorageSettings": {
    "UploadsFolder": "Uploads" // This will be a folder at the project root level
  },
  // --- THESE SECTIONS MUST BE AT THE TOP-LEVEL, NOT INSIDE "NLog" ---
  "AllowedHosts": "*",
  "BackgroundServices": {
    "RentalReminderService": {
      "InitialDelayMinutes": 1, // The service will wait 1 minute after startup before first execution
      "IntervalMinutes": 1440 // After the first run, it will run every 60 minutes
    },
    //"NewArrivalsNewsletterScheduler": {
    //  // You can add similar settings for other services if needed
    //  // "InitialDelaySeconds": 30, // As per your log: "Next run in 30 seconds."
    //  // "CronSchedule": "0 0 * * *" // More advanced scheduling using cron expressions
    //}
  },
  "JWT": {
    "Issuer": "http://localhost:5246", // Your local API URL
    "Audience": "http://localhost:5246", // Your local client/audience URL
    "SigningKey": "evelopmentSecretKey45678909999ABCDEF" // **Provide a non-empty, non-null string here** previous one MyDevelopmentSecretKey1234567890ABCDEF
  },
  "ConnectionStrings": {
    "LocalConnection": "Server=(localdb)\\mssqllocaldb;Database=BookStoreApiDb;Trusted_Connection=True;MultipleActiveResultSets=true"
  }
}